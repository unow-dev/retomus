{"version":3,"sources":["../src/index.ts","../src/common/utils/index.ts","../src/core/CompositeAction/index.ts","../src/core/CompositeAction/CompositeAction.ts","../src/common/bus/EventBus.ts","../src/core/CompositeAction/types.ts","../src/core/Ctx/Ctx.ts","../src/common/hooks/index.ts","../src/react/RetomusWrapper.tsx","../src/core/Ctx/hooks.ts","../src/core/Ctx/SharedCtx.ts","../src/core/Ctx/MergedCtx.ts","../src/core/Ctx/index.ts","../src/core/Machine/Machine.ts","../src/core/Machine/constants.ts","../src/core/Machine/hooks.ts","../src/core/Machine/index.ts","../src/common/bus/CommandBus.ts","../src/core/Retomus/RetomusCommandBus.ts","../src/core/Retomus/RetomusEventBus.ts","../src/core/Retomus/Retomus.ts","../src/utils/RetomusUtils.ts"],"sourcesContent":["import { createRetomus, createRetomusConfig } from './core/Retomus/Retomus';\nimport RetomusUtils from './utils/RetomusUtils';\nimport { ValueCategory } from './common/types/Value';\nimport RetomusWrapper from './react/RetomusWrapper';\n\nconst { createMachineConfig, createCompositeActionConfig } = RetomusUtils;\n\nexport {\n  createRetomus,\n  createRetomusConfig,\n  createMachineConfig,\n  createCompositeActionConfig,\n  ValueCategory,\n  RetomusWrapper,\n};\n","import { Ctx } from '../../core/Ctx';\nimport {\n   CategoryId,\n   CtxId,\n   ValueCategories,\n   ValueCategory,\n   ValueCategoryName,\n   ValueId,\n   ValueName,\n} from '../types/Value';\n\nconst withUpperCaseFirstLetter = str =>\n   str.charAt(0).toUpperCase() + str.slice(1);\n\nconst createValueId = (valueName: ValueName, categoryId: CategoryId): ValueId =>\n   `${categoryId}-${valueName}`;\n\nconst compileValuesRecordToMap = (\n   record: Record<CategoryId, Record<ValueName, any>>,\n   ctxId,\n): Map<ValueId, any> => {\n   const map = new Map<ValueId, any>();\n\n   for (const [categoryId, values] of Object.entries(record)) {\n      for (const [valueName, value] of Object.entries(values)) {\n         map.set(createValueId(valueName, categoryId), value);\n      }\n   }\n\n   return map;\n};\n\nconst compileValuesMapToRecord = (\n   map: Map<ValueId, any>,\n): Record<ValueId, any> => Object.fromEntries(map);\n\nconst compileValueCategoriesRecordToMap = (\n   record: Record<ValueCategoryName, ValueCategory>,\n): ValueCategories => new Map(Object.entries(record));\n\nexport {\n   withUpperCaseFirstLetter,\n   createValueId,\n   compileValuesRecordToMap,\n   compileValuesMapToRecord,\n   compileValueCategoriesRecordToMap,\n};\n","const createCompositeActionApi = compositeAction => {\n   const hooks = compositeAction.getHooks();\n   return {\n      use: hooks.use,\n   };\n};\n\nexport { createCompositeActionApi };","import { useState, useEffect } from 'react';\nimport { ActionHandler } from '../../common/types/Action';\nimport RetomusEventBus from '../Retomus/RetomusEventBus';\nimport {\n   ICompositeAction,\n   ActionFlow,\n   ResultBus,\n   CompositeActionEventBus,\n   CompositeActionConfig,\n   ActionFlowMatter,\n   SingleActionFlowMatter,\n   ActionName,\n   ParallelActionFlowMatter,\n   SequenceActionFlowMatter,\n   CompositeActionApi,\n   ReturnUse,\n} from './types';\n\nexport class CompositeAction implements ICompositeAction {\n   id: string = '';\n   actionHandlers: Map<string, ActionHandler> = new Map();\n   actionFlow: ActionFlow = { type: 'sequence', actions: [] };\n   resultBus: ResultBus = {};\n   subscribers: Record<string, Set<() => void>> = {};\n   machineIdAndActionNames: Map<string, string[]> = new Map();\n   eventBus: CompositeActionEventBus = new CompositeActionEventBus();\n   retomusEventBus: RetomusEventBus;\n   totalOfActions: number = 0;\n   countOfReadyActions: number = 0;\n   concurrency: number = 1;\n   currentExecutionCount: number = 0;\n\n   constructor(\n      config: CompositeActionConfig,\n      retomusEventBus: RetomusEventBus,\n   ) {\n      this.id = config.id;\n      this.resultBus = {};\n      this.retomusEventBus = retomusEventBus;\n\n      this._processActionFlowMatters(config.action);\n\n      if (config?.options && config?.options?.concurrency) {\n         this.concurrency = config.options.concurrency;\n      }\n   }\n\n   _processActionFlowMatters(actionFlowMatters: ActionFlow): void {\n      this.actionFlow = actionFlowMatters;\n      actionFlowMatters.actions.forEach(actionFlowMatter => {\n         this._processActionFlowMatter(actionFlowMatter);\n      });\n   }\n\n   _processActionFlowMatter(actionFlowMatter: ActionFlowMatter): void {\n      if (actionFlowMatter.type === 'action') {\n         this._processSingleActionFlowMatter(actionFlowMatter);\n      }\n      if (actionFlowMatter.type === 'parallel') {\n         this._processParallelActionFlowMatter(actionFlowMatter);\n      }\n      if (actionFlowMatter.type === 'sequence') {\n         this._processSequenceActionFlowMatter(actionFlowMatter);\n      }\n   }\n   _processSingleActionFlowMatter(\n      actionFlowMatter: SingleActionFlowMatter,\n   ): void {\n      if (!this.machineIdAndActionNames.has(actionFlowMatter.machineId)) {\n         this.machineIdAndActionNames.set(actionFlowMatter.machineId, []);\n      }\n      this.machineIdAndActionNames\n         .get(actionFlowMatter.machineId)\n         ?.push(actionFlowMatter.actionName);\n\n      const off = this.retomusEventBus.onMachineIsReady(({ machine }) => {\n         if (machine.id === actionFlowMatter.machineId) {\n            this.actionHandlers.set(\n               actionFlowMatter.actionName,\n               async payload =>\n                  await machine._executeAction(\n                     actionFlowMatter.actionName,\n                     payload,\n                  ),\n            );\n            off();\n         }\n      });\n      this.totalOfActions++;\n   }\n\n   setHandler(actionName: ActionName, handler: ActionHandler): void {\n      this.actionHandlers.set(actionName, handler);\n      this.countOfReadyActions++;\n      if (this.countOfReadyActions === this.totalOfActions) {\n         this.eventBus.emitReady(this);\n      }\n   }\n\n   _processParallelActionFlowMatter(\n      actionFlowMatter: ParallelActionFlowMatter,\n   ): void {\n      actionFlowMatter.actions.forEach(actionFlowMatter => {\n         if (actionFlowMatter.type === 'action') {\n            this._processSingleActionFlowMatter(actionFlowMatter);\n         } else {\n            this._processActionFlowMatter(actionFlowMatter);\n         }\n      });\n   }\n\n   _processSequenceActionFlowMatter(\n      actionFlowMatter: SequenceActionFlowMatter,\n   ): void {\n      actionFlowMatter.actions.forEach(actionFlowMatter => {\n         if (actionFlowMatter.type === 'action') {\n            this._processSingleActionFlowMatter(actionFlowMatter);\n         } else {\n            this._processActionFlowMatter(actionFlowMatter);\n         }\n      });\n   }\n\n   subscribe(subscriber: () => void, scope: string): () => void {\n      if (!this.subscribers[scope]) {\n         this.subscribers[scope] = new Set();\n      }\n      this.subscribers[scope].add(subscriber);\n      return () => {\n         this.subscribers[scope].delete(subscriber);\n      };\n   }\n   subscribeReady(subscriber: () => void): () => void {\n      return this.subscribe(subscriber, 'ready');\n   }\n   notifySubscribers(scope: string): void {\n      if (!this.subscribers[scope]) {\n         return;\n      }\n      this.subscribers[scope].forEach(subscriber => subscriber());\n   }\n   notifyReady(): void {\n      this.notifySubscribers('ready');\n   }\n   getHooks(): CompositeActionApi {\n      return {\n         use: useIn(this),\n      };\n   }\n   _executeAction = async (actionName: string, payload: any) => {\n      if (this.currentExecutionCount >= this.concurrency) return;\n      this.currentExecutionCount++;\n      const actionHandler = this.actionHandlers.get(actionName);\n      if (actionHandler) {\n         try {\n            await actionHandler(payload);\n         } catch (error) {\n            console.error(error);\n         }\n      }\n\n      this.currentExecutionCount--;\n   };\n   _handleActionFlowMatter = async (\n      actionFlowMatter: ActionFlowMatter,\n      payload: any,\n   ) => {\n      if (actionFlowMatter.type === 'action') {\n         await this._executeAction(actionFlowMatter.actionName, payload);\n      } else if (actionFlowMatter.type === 'sequence') {\n         await this._handleSequenceActionFlowMatter(actionFlowMatter, payload);\n      } else if (actionFlowMatter.type === 'parallel') {\n         await this._handleParallelActionFlowMatter(actionFlowMatter, payload);\n      }\n   };\n   _handleSequenceActionFlowMatter = async (\n      _actionFlowMatter: SequenceActionFlowMatter,\n      payload: any,\n   ) => {\n      for (const actionFlowMatter of _actionFlowMatter.actions) {\n         if (actionFlowMatter.type === 'action') {\n            await this._executeAction(actionFlowMatter.actionName, payload);\n         } else {\n            await this._handleActionFlowMatter(actionFlowMatter, payload);\n         }\n      }\n   };\n   _handleParallelActionFlowMatter = async (\n      _actionFlowMatter: ParallelActionFlowMatter,\n      payload: any,\n   ) => {\n      const promises = _actionFlowMatter.actions.map(actionFlowMatter => {\n         if (actionFlowMatter.type === 'action') {\n            return this._executeAction(actionFlowMatter.actionName, payload);\n         } else {\n            return this._handleActionFlowMatter(actionFlowMatter, payload);\n         }\n      });\n      await Promise.all(promises);\n   };\n   async execute(payload: any): Promise<any> {\n      await this._handleActionFlowMatter(this.actionFlow, payload);\n      return this.resultBus;\n   }\n}\n\nconst useIn = (instance: ICompositeAction) => (): ReturnUse => {\n   const [execute, setExecute] = useState(() => payload => {\n      return instance.execute({ results: instance.resultBus, payload });\n   });\n   const [isReady, setIsReady] = useState(false);\n   useEffect(() => {\n      const unsubscribe = instance.subscribeReady(() => {\n         setExecute(() => payload => {\n            return instance.execute({ results: instance.resultBus, payload });\n         });\n         setIsReady(true);\n      });\n      return unsubscribe;\n   }, [setExecute, setIsReady]);\n\n   return [execute, isReady];\n};\n\nexport default CompositeAction;\n","class EventBus<Events extends Record<string, any>> {\n   private listeners: {\n      [K in keyof Events]?: Array<(payload: Events[K]) => void>;\n   } = {};\n\n   on<K extends keyof Events>(event: K, handler: (payload: Events[K]) => void) {\n      if (!this.listeners[event]) {\n         this.listeners[event] = [];\n      }\n      this.listeners[event]!.push(handler);\n   }\n\n   off<K extends keyof Events>(\n      event: K,\n      handler: (payload: Events[K]) => void,\n   ) {\n      this.listeners[event] = (this.listeners[event] ?? []).filter(\n         h => h !== handler,\n      );\n   }\n\n   emit<K extends keyof Events>(event: K, payload: Events[K]) {\n      this.listeners[event]?.forEach(handler => handler(payload));\n   }\n}\n\nexport default EventBus;","import EventBus from \"../../common/bus/EventBus\";\nimport { ActionHandler } from \"../../common/types/Action\";\n\ntype CompositeActionConfig = {\n   id: string;\n   action: ActionFlow;\n   options?: {\n      concurrency?: number\n   }\n};\n\nclass CompositeActionEventBus {\n   eventBus: EventBus<CompositeActionEventMap> = new EventBus();\n   constructor() {}\n   onReady(handler: ({ compositeAction }: { compositeAction: any }) => void) {\n      this.eventBus.on('ready', handler);\n   }\n   emitReady(compositeAction: any) {\n      compositeAction.notifyReady();\n      this.eventBus.emit('ready', { compositeAction });\n   }\n}\n\ntype CompositeActionEventMap = {\n   ready: { compositeAction: any };\n};\n\ntype ReturnUse = [execute: (payload) => Promise<any>, isReady: boolean];\n\ntype CompositeActionApi = {\n   use: any;\n};\n\ninterface ICompositeAction {\n   id: string;\n   actionHandlers: Map<string, ActionHandler>;\n   actionFlow: ActionFlow;\n   resultBus: ResultBus;\n   subscribers: Record<string, Set<() => void>>;\n   machineIdAndActionNames: Map<string, string[]>;\n   concurrency: number;\n   setHandler(actionName: ActionName, handler: ActionHandler): void;\n   subscribeReady(subscriber: () => void): () => void;\n   notifySubscribers(scope): void;\n   getHooks(): CompositeActionApi;\n   execute(params: ActionHandlerParams): Promise<any>;\n}\n\ntype ResultBus = Record<string, any>;\ntype ActionName = string;\ntype SingleActionFlowMatter = {\n   type: 'action';\n   machineId: string;\n   actionName: ActionName;\n};\ntype GroupActionFlowMatter =\n   | ParallelActionFlowMatter\n   | SequenceActionFlowMatter;\ntype ParallelActionFlowMatter = {\n   type: 'parallel';\n   actions: (SingleActionFlowMatter | GroupActionFlowMatter)[];\n};\ntype SequenceActionFlowMatter = {\n   type: 'sequence';\n   actions: (SingleActionFlowMatter | GroupActionFlowMatter)[];\n};\ntype ActionFlowMatter = SingleActionFlowMatter | GroupActionFlowMatter;\ntype ActionFlow = GroupActionFlowMatter;\n\ntype ActionHandlerParams = {\n   payload: any;\n   results: ResultBus;\n};\n\nexport {\n   CompositeActionConfig,\n   CompositeActionEventBus,\n   CompositeActionEventMap,\n   ReturnUse,\n   CompositeActionApi,\n   ICompositeAction,\n   ResultBus,\n   ActionName,\n   SingleActionFlowMatter,\n   GroupActionFlowMatter,\n   ParallelActionFlowMatter,\n   SequenceActionFlowMatter,\n   ActionFlowMatter,\n   ActionFlow,\n   ActionHandlerParams,\n};","import {\n   CtxId,\n   ReactRefValueSetter,\n   Value,\n   ValueCategories,\n   ValueId,\n} from '../../common/types/Value';\nimport {\n   compileValueCategoriesRecordToMap,\n   compileValuesMapToRecord,\n   compileValuesRecordToMap,\n   createValueId,\n} from '../../common/utils';\nimport { CtxMatter, IMachineCtx } from './types';\nimport React from 'react';\n\nconst createCtx = (\n   id: CtxId,\n   values: Record<string, Record<string, any>>,\n   valueCategories: Record<string, any>,\n) => {\n   return new Ctx(\n      id,\n      compileValuesRecordToMap(values, id),\n      compileValueCategoriesRecordToMap(valueCategories),\n   );\n};\n\nclass Ctx implements IMachineCtx {\n   id: string;\n   values: Map<ValueId, Value> = new Map();\n   subscribers: Map<ValueId, Set<React.Dispatch<Value>>> = new Map();\n   valueCategories: ValueCategories = new Map();\n\n   constructor(\n      id: string,\n      values: Map<ValueId, Value> = new Map(),\n      valueCategories: ValueCategories,\n   ) {\n      this.id = id;\n      this.values = values;\n\n      this.valueCategories = valueCategories;\n\n      this.values.forEach((_, valueId) => {\n         this.subscribers.set(valueId, new Set());\n      });\n   }\n\n   getCtxIdByValueId(valueId: ValueId) {\n      return this.id;\n   }\n\n   dynamicSetup(\n      ctxMatter: CtxMatter,\n      options: {\n         overwrite: boolean;\n      } = { overwrite: true },\n   ) {\n      const needNotify: [ValueId, any][] = [];\n      const newValues = compileValuesRecordToMap(ctxMatter, this.id);\n      newValues.forEach((value, valueId) => {\n         if (!this.values.has(valueId)) {\n            this.setValue(valueId, value);\n         }\n         const newValue = value;\n         const oldValue = this.getValue(valueId);\n         if (newValue !== oldValue && options.overwrite) {\n            this.setValue(valueId, newValue);\n            needNotify.push([valueId, newValue]);\n         }\n      });\n      for (const [valueId, value] of needNotify) {\n         this._notifySubscribers(valueId, value);\n      }\n   }\n\n   setValue(key: ValueId, value: any) {\n\n      this.values.set(key, value);\n      this._notifySubscribers(key, value);\n   }\n\n   getValue(key: ValueId): any {\n      return this.values.get(key);\n   }\n\n   getValueAndSetter(key: ValueId) {\n      return this.values.get(key);\n   }\n\n   subscribe(key: ValueId, setValue: ReactRefValueSetter) {\n      if (!this.subscribers.has(key)) {\n         this.subscribers.set(key, new Set());\n      }\n      this.subscribers.get(key)?.add(setValue);\n      return () => {\n         this.subscribers.get(key)?.delete(setValue);\n      };\n   }\n\n   toRecord() {\n      return compileValuesMapToRecord(this.values);\n   }\n\n   _createValueProxies(ctx: Ctx, options: { readonly: boolean } = { readonly: false }) {\n      const proxies = {};\n      ctx.valueCategories.forEach((_value, valueCategoryName) => {\n         proxies[valueCategoryName] = new Proxy<any>(\n            {},\n            {\n               get(target, prop: string) {\n                  if (typeof prop === 'symbol') {\n                     return target[prop];\n                  }\n                  const valueId = createValueId(prop, valueCategoryName);\n                  if (ctx.values.has(valueId)) {\n                     return ctx.getValue(valueId);\n                  }\n               },\n               set(target, prop: string, value) {\n                  if (options.readonly) {\n                     return true;\n                  }\n                  if (typeof prop === 'symbol') {\n                     return true;\n                  }\n                  const valueId = createValueId(prop, valueCategoryName);\n                  if (ctx.values.has(valueId)) {\n                     ctx.setValue(valueId, value);\n                     return true;\n                  }\n                  return true;\n               },\n            },\n         );\n      });\n\n      return proxies;\n   }\n\n   toReactiveRecord(options = { readonly: false }) {\n      return this._createValueProxies(this, options);\n   }\n\n   private _notifySubscribers(valueId: ValueId, value: any) {\n      if (!this.subscribers.get(valueId)) {\n         return;\n      }\n      this.subscribers.get(valueId)?.forEach(setState => {\n         setState(value);\n      });\n   }\n}\n\nexport default Ctx;\nexport { createCtx };\n","import {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { createValueId, withUpperCaseFirstLetter } from '../utils';\nimport { RetomusWrapperContext } from '../../react/RetomusWrapper';\nimport { Ctx } from '../../core/Ctx';\nimport { Machine } from '../../core/Machine';\nimport { Value, ValueCategories, ValueCategory } from '../types/Value';\n\nconst valueHook =\n  (hookProvider: Ctx | Machine, category: ValueCategory) => key => {\n    const valueId = createValueId(key, category.id);\n    const { refs } = useContext(RetomusWrapperContext);\n    const ctxIdOfValueId = hookProvider.getCtxIdByValueId(valueId);\n\n    // setterType state: => value, ref: => ref\n    // stateの場合、setStateを購読者としてセット\n    // refの場合、(value)=>ref.current = value を購読者としてセット\n    const [value, setValue] = category.use(hookProvider.getValue(valueId));\n    const unsubscribeRef = useRef(null);\n    const initializedRef = useRef(false);\n\n    useEffect(() => {\n      if (category.setterType === 'state') {\n        hookProvider.setValue(valueId, value);\n        unsubscribeRef.current = hookProvider.subscribe(valueId, setValue);\n      }\n    }, [setValue, valueId, value]);\n\n    const target = useRef(refs.current); // target-map\n    useEffect(() => {\n      if (category.setterType === 'ref' && !initializedRef.current) {\n        if (!target.current.has(ctxIdOfValueId)) {\n          // add map to refs for ctx\n          target.current.set(ctxIdOfValueId, new Map());\n        }\n        target.current = target.current.get(ctxIdOfValueId);\n        if (!target.current.has(category.id)) {\n          target.current.set(category.id, new Map());\n        }\n        target.current = target.current.get(category.id);\n        if (target.current.has(valueId)) {\n          // existed ref in react context\n          // dispose a new ref\n          setValue(null);\n          initializedRef.current = true;\n        } else {\n          // set new ref in react context\n          target.current.set(valueId, value);\n          // set in machine, and subscribe in machine\n          hookProvider.setValue(valueId, value[category.valuePropName]);\n          unsubscribeRef.current = hookProvider.subscribe(valueId, setValue);\n          initializedRef.current = true;\n        }\n      }\n    }, []);\n\n    useEffect(() => {\n      if (category.setterType === 'ref') {\n        unsubscribeRef.current = hookProvider.subscribe(valueId, setValue);\n      }\n    }, [setValue]);\n\n    useEffect(() => {\n      return () => {\n        if (category.setterType === 'state') {\n          if (unsubscribeRef.current) {\n            unsubscribeRef.current();\n          }\n        }\n        // todo: fixed this bug. 他のコンポーネントで同じvalueIdを使っていた場合、valueIdを削除しないようにする。\n        // RetomusWrapperContextでvalueの購読者を管理し、ここではvalueの購読者を削除する。\n        // 削除後、購読者が0になったら、valueIdを削除し、ctxのsubscribersからも削除する。\n        // if (category.setterType === 'ref') {\n        //   refs.current?.get(ctxIdOfValueId)?.get(category.id)?.delete(valueId);\n        // if (unsubscribeRef.current) {\n        //   unsubscribeRef.current();\n        // }\n        // }\n      };\n    }, []);\n\n    return category.setterType === 'state'\n      ? value\n      : refs.current?.get(ctxIdOfValueId)?.get(category.id)?.get(valueId) ||\n          value;\n  };\n\nconst createValueHooks = (\n  hookProvider: Ctx | Machine,\n  valueCategories: ValueCategories,\n): Record<string, any> => {\n  const hooks = {};\n  valueCategories.forEach(category => {\n    hooks[`use${withUpperCaseFirstLetter(category.id)}`] = valueHook(\n      hookProvider,\n      category,\n    );\n  });\n  return hooks;\n};\n\nexport { createValueHooks };\n","import { createContext, useRef } from 'react';\nimport { CtxId, ValueId } from '../common/types/Value';\n\nconst RetomusWrapperContext = createContext<{\n   refs;\n}>({\n   refs: new Map<CtxId, Map<ValueId, any>>(),\n});\n\nconst RetomusWrapper = (props: any) => {\n   const refs = useRef(new Map());\n   return (\n      <RetomusWrapperContext.Provider value={{ refs }}>\n         {props.children}\n      </RetomusWrapperContext.Provider>\n   );\n};\n\nexport default RetomusWrapper;\nexport { RetomusWrapperContext };\n","import { createValueHooks } from \"../../common/hooks\";\n\nconst createSharedCtxValueHooks = (ctx, categories): Record<string, any> =>\n   createValueHooks(ctx, categories);\n\nexport { createSharedCtxValueHooks };\n","import { Value, ValueCategories, ValueId } from '../../common/types/Value';\nimport {\n   compileValuesRecordToMap,\n} from '../../common/utils';\nimport Ctx from './Ctx';\nimport { createSharedCtxValueHooks } from './hooks';\n\nconst createSharedCtx = (\n   id: string,\n   values: Record<string, Record<string, any>>,\n   valueCategories: Map<string, any>,\n) => {\n   return new SharedCtx(\n      id,\n      compileValuesRecordToMap(values, id),\n      valueCategories,\n   );\n};\n\nclass SharedCtx extends Ctx {\n   flagBus: Record<string, boolean> = {\n      isReady: false,\n   };\n   constructor(\n      id: string,\n      values: Map<ValueId, Value> = new Map(),\n      valueCategories: ValueCategories,\n   ) {\n      super(id, values, valueCategories);\n   }\n\n   createHooks() {\n      return createSharedCtxValueHooks(this, this.valueCategories);\n   }\n}\n\nexport default SharedCtx;\nexport { createSharedCtx };","import { CtxId, ValueCategories, ValueId } from '../../common/types/Value';\nimport {\n   compileValueCategoriesRecordToMap,\n   createValueId,\n} from '../../common/utils';\nimport Ctx from './Ctx';\nimport { CtxMatter, IMachineCtx } from './types';\nimport React from 'react';\n\nclass MergedCtx implements IMachineCtx {\n   ownCtx: Ctx;\n   ctxs: Map<string, Ctx>;\n   valueIdAndCtxIdMap: Map<ValueId, CtxId>;\n   valueCategories: ValueCategories;\n\n   constructor(\n      ownCtx: Ctx,\n      ctxs: Record<string, Ctx>,\n      valueCategories: ValueCategories,\n   ) {\n      this.ownCtx = ownCtx;\n      this.ctxs = new Map(Object.entries(ctxs));\n      this.valueIdAndCtxIdMap = this._createValuesIdAndCtxIdMap();\n      this.valueCategories = valueCategories;\n      // try {\n      //    this._subscribeAllForSharedCtx(valueCategories);\n      // } catch (error) {\n      //    console.error(error);\n      // }\n   }\n\n   // _subscribeAllForSharedCtx(valueCategories) {\n   //    for (const category of valueCategories) {\n   //       if (category.setterType === 'state') {\n   //          for (const [key, ctxId] of this.valueIdAndCtxIdMap[category.id]) {\n   //             if (ctxId === this.ownCtx.id) {\n   //                continue;\n   //             }\n   //             const ctx = this.ctxs.get(ctxId);\n   //             if (ctx) {\n   //                ctx.subscribe(key, value => this.setValue(key, value));\n   //             }\n   //          }\n   //       }\n   //    }\n   // }\n\n   getCtxIdByValueId(valueId: ValueId) {\n      return this.valueIdAndCtxIdMap.get(valueId);\n   }\n\n   setValue(key: ValueId, value: any) {\n\n      const ctxId = this.valueIdAndCtxIdMap.get(key);\n      if (ctxId === this.ownCtx.id) {\n         return this.ownCtx.setValue(key, value);\n      }\n      const ctx = this.ctxs.get(ctxId);\n      if (ctx) {\n         return ctx.setValue(key, value);\n      }\n   }\n\n   getValue(key: ValueId): any {\n      const ctxId = this.valueIdAndCtxIdMap.get(key);\n      if (ctxId === this.ownCtx.id) {\n         return this.ownCtx.getValue(key);\n      }\n      const ctx = this.ctxs.get(ctxId);\n      if (ctx) {\n         return ctx.getValue(key);\n      }\n   }\n\n   // getRef(key: ValueId, category: Record<string, any>): any {\n   //    const ctxId = this.valueIdAndCtxIdMap[category.id].get(key);\n   //    if (ctxId === this.ownCtx) {\n   //       return this.ownCtx.getRef(key, category);\n   //    }\n   //    const ctx = this.ctxs.get(ctxId);\n   //    if (ctx) {\n   //       return ctx.getRef(key, category);\n   //    }\n   // }\n\n   dynamicSetup(ctxMatter: CtxMatter, options: any) {\n      for (const ctx of this.ctxs.values()) {\n         ctx.dynamicSetup(ctxMatter, options);\n      }\n      this.ownCtx.dynamicSetup(ctxMatter, options);\n   }\n\n   subscribe(\n      key: ValueId,\n      setState: React.Dispatch<React.SetStateAction<any>>,\n   ) {\n      const ctxId = this.valueIdAndCtxIdMap.get(key);\n      if (ctxId === this.ownCtx.id) {\n         return this.ownCtx.subscribe(key, setState);\n      }\n      const ctx = this.ctxs.get(ctxId);\n      if (ctx) {\n         return ctx.subscribe(key, setState);\n      }\n   }\n\n   _createValueProxies(\n      mergedCtx: MergedCtx,\n      options: { readonly: boolean } = {\n         readonly: false,\n      },\n   ) {\n      const proxies = {};\n      const getHandle = (target, prop, valueCategoryName) => {\n\n         if (typeof prop === 'symbol') {\n            return target[prop];\n         }\n         const valueId = createValueId(prop, valueCategoryName);\n         const ctxId = mergedCtx.valueIdAndCtxIdMap.get(valueId);\n         console.log(ctxId);\n         console.log(mergedCtx.valueIdAndCtxIdMap);\n         if (!ctxId) {\n            return target[prop];\n         } else {\n            const ctx = mergedCtx.ctxs.get(ctxId);\n            console.log(mergedCtx.ctxs);\n            console.log(ctx);\n            if (ctx.values.has(valueId)) {\n               return ctx.getValue(valueId);\n            }\n         }\n      };\n      const setHandle = (target, prop, value, valueCategoryName) => {\n         const valueId = createValueId(prop, valueCategoryName);\n         const ctxId = mergedCtx.valueIdAndCtxIdMap.get(valueId);\n         if (!ctxId) {\n            return true;\n         } else {\n            const ctx = mergedCtx.ctxs.get(ctxId);\n            if (ctx) {\n               ctx.setValue(valueId, value);\n               return true;\n            }\n         }\n      };\n      const setHandleReadOnly = () => {\n         return true;\n      };\n      const createProxies = (getHandle, setHandle) => {\n         const proxies = {};\n         mergedCtx.valueCategories.forEach((_value, valueCategoryName) => {\n            proxies[valueCategoryName] = new Proxy<any>(\n               {},\n               {\n                  get(target, prop: string) {\n                     return getHandle(target, prop, valueCategoryName);\n                  },\n                  set(target, prop: string, value) {\n                     return setHandle(target, prop, value, valueCategoryName);\n                  },\n               },\n            );\n         });\n\n         return proxies;\n      };\n\n      return createProxies(\n         getHandle,\n         options.readonly ? setHandleReadOnly : setHandle,\n      );\n   }\n\n   _createValueProxiesReadOnly(mergedCtx: MergedCtx) {\n      const proxies = {};\n      const getHandle = (target, prop, valueCategoryName) => {\n\n         if (typeof prop === 'symbol') {\n            return target[prop];\n         }\n         const valueId = createValueId(prop, valueCategoryName);\n         const ctxId = mergedCtx.valueIdAndCtxIdMap.get(valueId);\n         if (!ctxId) {\n            return target[prop];\n         } else {\n            const ctx = mergedCtx.ctxs.get(ctxId);\n            if (ctx.values.has(valueId)) {\n               return ctx.getValue(valueId);\n            }\n         }\n      };\n      const setHandle = () => {\n         return true;\n      };\n      mergedCtx.valueCategories.forEach((_value, valueCategoryName) => {\n         proxies[valueCategoryName] = new Proxy<any>(\n            {},\n            {\n               get(target, prop: string) {\n                  return getHandle(target, prop, valueCategoryName);\n               },\n               set(_, prop: string, value) {\n                  return setHandle();\n               },\n            },\n         );\n      });\n\n      return proxies;\n   }\n\n   toRecord() {\n      return this._createValueProxiesReadOnly(this);\n   }\n\n   toReactiveRecord(\n      { readonly }: { readonly: boolean } = { readonly: false },\n   ): Record<string, any> {\n      return this._createValueProxies(this, { readonly });\n   }\n\n   private _createValuesIdAndCtxIdMap() {\n      const valuesIdAndCtxIdMap = new Map();\n      const ctxs = [...this.ctxs.values(), this.ownCtx];\n      for (const ctx of ctxs) {\n         ctx.values.forEach((valueObj, valueId) => {\n            valuesIdAndCtxIdMap.set(valueId, ctx.id);\n         });\n      }\n      return valuesIdAndCtxIdMap;\n   }\n}\n\nexport default MergedCtx;\n","import SharedCtx from './SharedCtx';\nimport MergedCtx from './MergedCtx';\nimport Ctx from './Ctx';\nimport { CtxApi } from './types';\n\nconst createCtxApi = (ctx: SharedCtx): CtxApi => {\n   const hooks = ctx.createHooks();\n   return {\n      setup: ({ ctx, options }) => {\n         ctx.dynamicSetup(ctx, options);\n      },\n      useState: hooks.useState,\n      useRef: hooks.useRef,\n      useFlag: hooks.useFlag,\n   };\n};\n\nexport { createCtxApi, SharedCtx, MergedCtx, Ctx };\n","import React, {\n  useState,\n  useMemo,\n  useEffect,\n  useRef,\n  useCallback,\n} from 'react';\nimport { ActionHandlers, ActionHandler } from '../../common/types/Action';\nimport { Ctx, MergedCtx } from '../Ctx';\nimport { RetomusCommandBus, RetomusEventBus } from '../Retomus';\nimport { DEFAULT_STATUS } from './constants';\nimport { MachineApi, MachineHooks } from './types';\nimport { createMachineValueHooks } from './hooks';\nimport {\n  ValueCategories,\n  ValueCategory,\n  ValueCategoryName,\n  ValueId,\n} from '../../common/types/Value';\nimport {\n  compileValueCategoriesRecordToMap,\n  compileValuesRecordToMap,\n} from '../../common/utils';\nimport { CtxMatter } from '../Ctx/types';\n\nconst createMachine = (\n  config: any,\n  eventBus: RetomusEventBus,\n  commandBus: RetomusCommandBus,\n  valueCategories: Record<ValueCategoryName, ValueCategory>,\n) => {\n  return new Machine(\n    config,\n    eventBus,\n    commandBus,\n    compileValueCategoriesRecordToMap(valueCategories),\n  );\n};\n\nclass Machine {\n  id: string;\n  config: any;\n  status: string | typeof DEFAULT_STATUS = DEFAULT_STATUS;\n  statusSubscribers: Set<React.Dispatch<React.SetStateAction<any>>> = new Set();\n  ctx: {\n    single: Ctx | null;\n    merged: MergedCtx | null;\n  } = { single: null, merged: null };\n  actionHandlers: ActionHandlers = new Map<string, ActionHandler>();\n  sharedCtxIds: string[] = [];\n  typeBus: {\n    ctx: 'single' | 'merged';\n  } = { ctx: 'single' };\n  stateBus: {\n    isDoneSetupStatus: boolean;\n    isDoneStaticCtxSetup: boolean;\n    isDoneDynamicCtxSetup: boolean;\n  } = {\n    isDoneSetupStatus: false,\n    isDoneStaticCtxSetup: false,\n    isDoneDynamicCtxSetup: false,\n  };\n  flagBus: {\n    isReady: boolean;\n    isReadyCtx: boolean;\n    isReadyActions: boolean;\n  } = { isReady: false, isReadyCtx: false, isReadyActions: false };\n  flagSubscribers: Record<\n    string,\n    Set<React.Dispatch<React.SetStateAction<any>>>\n  > = {};\n  retomusEventBus: RetomusEventBus;\n  retomusCommandBus: RetomusCommandBus;\n  valueCategories: ValueCategories;\n  constructor(\n    config: any,\n    retomusEventBus: RetomusEventBus,\n    retomusCommandBus: RetomusCommandBus,\n    valueCategories: ValueCategories,\n  ) {\n    this.id = config.id;\n    this.config = config;\n    this.retomusEventBus = retomusEventBus;\n    this.retomusCommandBus = retomusCommandBus;\n    this.valueCategories = valueCategories;\n    this._staticSetupCtx(config.ctx);\n    this._staticSetupStatus(config.initialStatus);\n    this._staticSetupActionHandlers(config.actionHandlers);\n    const options = config?.options;\n    if (options) {\n      this._updateIsReadyCtx(!options?.dynamicSetupCtx);\n      this._updateIsReadyActions(!options?.dynamicSetupActions);\n      this._updateIsReady();\n      if (options?.sharedCtxIds) {\n        this.sharedCtxIds = options.sharedCtxIds;\n        const ctxs = this.sharedCtxIds.reduce((acc, ctxId) => {\n          acc[ctxId] = this.retomusCommandBus.execute('getCtx', ctxId);\n\n          return acc;\n        }, {});\n        this._setupMergedCtx(ctxs);\n      }\n    } else {\n      this._updateIsReadyCtx(true);\n      this._updateIsReadyActions(true);\n      this._updateIsReady();\n    }\n  }\n\n  getCtxIdByValueId(valueId: ValueId) {\n    return this.ctx[this.typeBus.ctx]?.getCtxIdByValueId(valueId);\n  }\n\n  setValue(key: ValueId, value: any) {\n\n    this.ctx[this.typeBus.ctx]?.setValue(key, value);\n  }\n\n  getValue(key: ValueId) {\n    return this.ctx[this.typeBus.ctx]?.getValue(key);\n  }\n\n  dynamicSetup(\n    ctxMatter: CtxMatter,\n    actionHandlers: ActionHandlers,\n    options = { ctx: { overwrite: true }, actionHandlers: {} },\n  ) {\n    let enableDynamicSetupCtx = true;\n    let enableDynamicSetupActions = true;\n    if (this.config?.options) {\n      enableDynamicSetupCtx = this.config.options?.dynamicSetupCtx;\n      enableDynamicSetupActions = this.config.options?.dynamicSetupActions;\n    }\n    if (enableDynamicSetupCtx) {\n      if (ctxMatter) {\n        this.ctx[this.typeBus?.ctx]?.dynamicSetup(ctxMatter, options.ctx);\n      }\n      this._updateIsReadyCtx(true);\n    }\n    this._dynamicSetupStatus(this.config.initialStatus);\n    if (enableDynamicSetupActions) {\n      if (actionHandlers) {\n        this._dynamicSetupActionHandlers(\n          actionHandlers,\n          options.actionHandlers,\n        );\n      }\n      this._updateIsReadyActions(true);\n    }\n  }\n\n  subscribeStatus(setStatus: React.Dispatch<React.SetStateAction<any>>) {\n\n    this.statusSubscribers.add(setStatus);\n    return () => {\n      this.statusSubscribers.delete(setStatus);\n    };\n  }\n\n  subscribe(key: ValueId, setState: React.Dispatch<React.SetStateAction<any>>) {\n    return this.ctx[this.typeBus.ctx]?.subscribe(key, setState);\n  }\n\n  // --- hooks ---\n  createHooks(): MachineHooks {\n    const useMachineStatusIn = machine => () => {\n      const [status, setStatus] = useState(machine.status);\n      const subscribeStatus = useCallback(\n        () => machine.subscribeStatus(setStatus),\n        [setStatus],\n      );\n      useEffect(() => {\n        const unsubscribe = subscribeStatus();\n        return unsubscribe;\n      }, [subscribeStatus]);\n      return status;\n    };\n\n    const useMachineActionIn = machine => key => {\n      return (payload: any) => machine._executeAction(key, payload);\n    };\n\n    const useMachineFlagIn = machine => key => {\n      const [flag, setFlag] = useState(machine.flagBus[key]);\n      const subscribeFlag = useCallback(\n        () => machine._subscribeFlag(key, setFlag),\n        [setFlag],\n      );\n      useEffect(() => {\n        const unsubscribe = subscribeFlag();\n        return unsubscribe;\n      }, [subscribeFlag]);\n      return flag;\n    };\n\n    return {\n      useStatus: useMachineStatusIn(this),\n      useAction: useMachineActionIn(this),\n      ...createMachineValueHooks(this, this.valueCategories),\n      useFlag: useMachineFlagIn(this),\n    };\n  }\n  // --- private ---\n\n  // flag\n  _setFlag(key: string, value: boolean) {\n    this.flagBus[key] = value;\n    this._notifyFlagSubscribers(key);\n  }\n\n  _updateIsReady() {\n    if (this.flagBus.isReady) return;\n    if (this.flagBus.isReadyCtx && this.flagBus.isReadyActions) {\n      this._setFlag('isReady', true);\n      this._notifyFlagSubscribers('isReady');\n      this.retomusEventBus.emitMachineIsReady(this);\n    } else {\n      if (!this.flagBus.isReadyCtx) {\n        this._subscribeFlag('isReadyCtx', (value: boolean) =>\n          this._updateIsReady(),\n        );\n      }\n      if (!this.flagBus.isReadyActions) {\n        this._subscribeFlag('isReadyActions', (value: boolean) =>\n          this._updateIsReady(),\n        );\n      }\n    }\n  }\n\n  _updateIsReadyCtx(value: boolean) {\n    if (value === this.flagBus.isReadyCtx) return;\n    this.flagBus.isReadyCtx = value;\n    this._notifyFlagSubscribers('isReadyCtx');\n  }\n\n  _updateIsReadyActions(value: boolean) {\n    if (value === this.flagBus.isReadyActions) return;\n    if (value && this.flagBus.isReadyCtx) {\n      this.flagBus.isReadyActions = true;\n      this._notifyFlagSubscribers('isReadyActions');\n    } else {\n      this._subscribeFlag('isReadyCtx', (value: boolean) => {\n        this._updateIsReadyActions(value);\n      });\n    }\n  }\n\n  _notifyFlagSubscribers(key: string) {\n    if (this.flagSubscribers[key]) {\n      for (const subscriber of this.flagSubscribers[key]) {\n        subscriber(this.flagBus[key]);\n      }\n    }\n  }\n\n  _subscribeFlag(\n    key: string,\n    callback:\n      | React.Dispatch<React.SetStateAction<any>>\n      | ((value: boolean) => void),\n  ) {\n    if (!this.flagSubscribers[key]) {\n      this.flagSubscribers[key] = new Set();\n    }\n    this.flagSubscribers[key].add(callback);\n    return () => {\n      this.flagSubscribers[key].delete(callback);\n    };\n  }\n\n  // action\n  _staticSetupActionHandlers(actionHandlers: ActionHandlers) {\n    this.actionHandlers = new Map(Object.entries(actionHandlers));\n  }\n\n  _dynamicSetupActionHandlers(actionHandlers: ActionHandlers, options) {\n    const overwrite = options?.overwrite || false;\n    if (overwrite) {\n      this.actionHandlers = new Map(Object.entries(actionHandlers));\n    } else {\n      for (const [key, value] of Object.entries(actionHandlers)) {\n        this.actionHandlers.set(key, value);\n      }\n    }\n  }\n\n  async _executeAction(action: string, payload: any) {\n    if (this.flagBus.isReadyActions === false) return;\n    if (this._validateAction(action) === false) return;\n\n    const handler = this.actionHandlers.get(action);\n    let returnValues;\n    if (handler) {\n      try {\n        returnValues = await this._processActionHandler(handler, payload);\n      } catch (error) {\n        console.error('Error occurred during processing action:', error);\n      }\n    }\n\n    return this._processTransitionSuccess(returnValues, action);\n  }\n\n  _processActionHandler(handler, payload): Promise<any> {\n    return new Promise((resolve, reject) => {\n      try {\n        handler({\n          ctx: this.ctx[this.typeBus.ctx]?.toReactiveRecord(),\n          payload,\n          done: (returnValues: Record<string, any> = {}) => {\n            resolve(returnValues);\n          },\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  _validateAction(action: string) {\n\n    const status = this.status;\n\n    if (status === DEFAULT_STATUS) {\n      return false;\n    }\n    if (!this.config.actions.includes(action)) {\n      // throw new Error(`Action \"${action}\" is not defined.`);\n      return false;\n    }\n    if (!this.config.transitions[status][action]) {\n      // throw new Error(\n      //    `Transition \"${status}\" to \"${action}\" is not defined.`,\n      // );\n      return false;\n    }\n    return true;\n  }\n\n  // transition\n  _processTransitionError(error: any, action: string) {\n    const onInvalidAction = this.config.onInvalidAction;\n    if (onInvalidAction) {\n      onInvalidAction(action, this.status);\n    }\n    console.error('Error occurred during processing action:', error);\n  }\n\n  _processTransitionSuccess(returnValues: any, action: string) {\n    const nextStatus = this.config.transitions[this.status][action];\n\n    if (typeof nextStatus === 'string') {\n      this._transitionStatus(nextStatus);\n    } else {\n      const router = this.config.router;\n\n      try {\n        const routedStatus = router[action](\n          this.ctx[this.typeBus.ctx].toReactiveRecord({ readonly: true }),\n        );\n        this._transitionStatus(routedStatus);\n      } catch (error) {\n\n      }\n    }\n    return returnValues;\n  }\n\n  // status\n  _staticSetupStatus(initialStatus) {\n    const { status, options } = initialStatus;\n    if (typeof status === 'string') {\n      this.status = status;\n    } else if (options.staticSetup) {\n      this.status = status(\n        this.ctx.single?.toReactiveRecord({ readonly: true }),\n      );\n    }\n  }\n\n  _dynamicSetupStatus(initialStatus) {\n    const { status, options } = initialStatus;\n    if (typeof status === 'function' && options.dynamicSetup) {\n      this.status = status(this.ctx[this.typeBus.ctx]?.toRecord());\n\n      this._notifyStatusSubscribers();\n    }\n  }\n\n  _notifyStatusSubscribers() {\n    this.statusSubscribers.forEach(setStatus => {\n      setStatus(this.status);\n    });\n  }\n\n  _transitionStatus(status: string) {\n\n    this.status = status;\n    this._notifyStatusSubscribers();\n  }\n\n  // ctx\n  _staticSetupCtx(ctx) {\n    const ctxMatter: CtxMatter = ctx;\n    this._setupSingleCtx(ctxMatter);\n  }\n\n  _setupSingleCtx(ctxMatter: CtxMatter) {\n    const singleCtx = new Ctx(\n      this.id,\n      compileValuesRecordToMap(ctxMatter, this.id),\n      this.valueCategories,\n    );\n    this.ctx.single = singleCtx;\n    this.typeBus.ctx = 'single';\n  }\n\n  _setupMergedCtx(sharedCtxs: Record<string, Ctx>) {\n    const mergedCtx = new MergedCtx(\n      this.ctx.single as Ctx,\n      {\n        ...sharedCtxs,\n      },\n      this.valueCategories,\n    );\n    this.ctx.merged = mergedCtx;\n    this.typeBus.ctx = 'merged';\n  }\n}\n\nexport default Machine;\nexport { createMachine };\n","const DEFAULT_STATUS = Symbol('default');\n\nexport { DEFAULT_STATUS };","import { createValueHooks } from '../../common/hooks';\n\nconst createMachineValueHooks = (machine, categories): Record<string, any> => {\n\n\n   return createValueHooks(machine, categories);\n};\n\nexport { createMachineValueHooks };\n","import Machine from './Machine';\nimport { MachineApi } from './types';\n\nconst createMachineApi = (machine: Machine): MachineApi => {\n   const hooks = machine.createHooks();\n   return {\n      setup: ({ ctx, actionHandlers, options }) => {\n         machine.dynamicSetup(ctx, actionHandlers, options);\n      },\n      ...hooks,\n   };\n};\n\nexport { createMachineApi, Machine };\n","class CommandBus<T> implements ICommandBus<T> {\n   commands: Map<keyof T, CommandHandler> = new Map<keyof T, CommandHandler>();\n\n   constructor(commandMap: Record<keyof T, CommandHandler>) {\n\n      this.commands = new Map<keyof T, CommandHandler>(\n         Object.entries(commandMap) as any,\n      );\n   }\n\n   execute(commandName: keyof T, params: any) {\n      const command = this.commands.get(commandName);\n\n\n      if (command) {\n         return command(params);\n      }\n   }\n}\n\ninterface ICommandBus<T = Record<string, any>> {\n   execute: (commandName: keyof T, params: any) => void;\n}\ntype CommandHandler = (params) => void | any;\n\nexport { CommandBus };","import { CommandBus } from \"../../common/bus/CommandBus\";\nimport Retomus from \"./Retomus\";\nimport { RetomusCommandMap } from \"./types\";\n\nclass RetomusCommandBus extends CommandBus<RetomusCommandMap> {\n   constructor(retomusInstance: Retomus) {\n      super({\n         getMachine: (id: string) => retomusInstance.getMachine(id),\n         getCtx: (id: string) => retomusInstance.getCtx(id),\n         getValueCategories: () => retomusInstance.getValueCategories(),\n      });\n   }\n}\n\nexport default RetomusCommandBus;","import EventBus from \"../../common/bus/EventBus\";\nimport { RetomusEventMap } from \"./types\";\n\nclass RetomusEventBus {\n   eventBus: EventBus<RetomusEventMap> = new EventBus();\n   constructor() {}\n   onMachineIsReady(handler: ({ machine }: { machine: any }) => void) {\n\n      this.eventBus.on('machineIsReady', handler);\n      return () => this.eventBus.off('machineIsReady', handler);\n   }\n   onCtxIsReady(handler: ({ ctx }: { ctx: string }) => void) {\n      this.eventBus.on('ctxIsReady', handler);\n      return () => this.eventBus.off('ctxIsReady', handler);\n   }\n   emitMachineIsReady(machine: any) {\n\n      this.eventBus.emit('machineIsReady', { machine });\n   }\n   emitCtxIsReady(ctx: any) {\n      this.eventBus.emit('ctxIsReady', { ctx });\n   }\n}\n\nexport default RetomusEventBus;","import {\n  ValueCategory,\n  ValueCategories,\n  ValueCategoryName,\n  CtxId,\n} from '../../common/types/Value';\nimport { compileValuesRecordToMap } from '../../common/utils';\nimport { createCompositeActionApi } from '../CompositeAction';\nimport CompositeAction from '../CompositeAction/CompositeAction';\nimport { CompositeActionConfig } from '../CompositeAction/types';\nimport { createCtxApi, Ctx, SharedCtx } from '../Ctx';\nimport { CtxApi, CtxMatter } from '../Ctx/types';\nimport { createMachineApi } from '../Machine';\nimport Machine from '../Machine/Machine';\nimport { MachineApi } from '../Machine/types';\nimport RetomusCommandBus from './RetomusCommandBus';\nimport RetomusEventBus from './RetomusEventBus';\nimport { useState, useRef } from 'react';\n\nconst defaultValueCategories = new Map<ValueCategoryName, ValueCategory>([\n  [\n    'state',\n    {\n      id: 'state',\n      use: (initialValue: any) => {\n        const [state, setState] = useState(initialValue);\n        return [state, setState];\n      },\n      setterType: 'state',\n      valuePropName: null,\n    },\n  ],\n  [\n    'ref',\n    {\n      id: 'ref',\n      use: (initialValue: any) => {\n        const ref = useRef(initialValue);\n        return [\n          ref,\n          value => {\n            ref.current = value;\n          },\n        ];\n      },\n      setterType: 'ref',\n      valuePropName: 'current',\n    },\n  ],\n]);\n\ntype RetomusConfig =\n  | {\n      valueCategories: ValueCategories;\n    }\n  | undefined;\n\nconst defaultRetomusConfig: RetomusConfig = {\n  valueCategories: defaultValueCategories,\n};\n\nconst createRetomus = (config: RetomusConfig = defaultRetomusConfig) =>\n  new Retomus(config);\n\nconst createValueCategories = (valueCategories: ValueCategory[]) => {\n  return new Map(\n    valueCategories.map(valueCategory => [valueCategory.id, valueCategory]),\n  );\n};\n\nconst createRetomusConfig = (\n  param: { valueCategories: ValueCategory[] } = { valueCategories: [] },\n) => {\n  return {\n    valueCategories: createValueCategories(param.valueCategories),\n  };\n};\n\nclass Retomus {\n  machines: Map<string, any> = new Map<string, any>();\n  ctxs: Map<string, any> = new Map<string, any>();\n  stateBus: any;\n  eventBus: RetomusEventBus;\n  commandBus: RetomusCommandBus;\n  valueCategories: Map<string, ValueCategory> = defaultValueCategories;\n\n  constructor(config: RetomusConfig) {\n    this.eventBus = new RetomusEventBus();\n    this.commandBus = new RetomusCommandBus(this);\n    if (config) {\n      if (config.valueCategories) {\n        config.valueCategories.forEach(valueCategory => {\n          this.registerValueCategory(valueCategory);\n        });\n      }\n    }\n  }\n\n  getValueCategories() {\n    return this.valueCategories;\n  }\n\n  registerValueCategory(ctxValueCategory: ValueCategory) {\n    this.valueCategories.set(ctxValueCategory.id, ctxValueCategory);\n\n  }\n\n  createMachine(config): MachineApi {\n    const machine = new Machine(\n      config,\n      this.eventBus,\n      this.commandBus,\n      this.valueCategories,\n    );\n    this.registerMachine(config.id, machine);\n    return createMachineApi(machine);\n  }\n\n  createCtx(id: CtxId, values: CtxMatter, options = {}): CtxApi {\n    const valuesMap = compileValuesRecordToMap(values, id);\n    const ctx = new SharedCtx(id, valuesMap, this.valueCategories);\n    this.registerCtx(id, ctx);\n    return createCtxApi(ctx);\n  }\n\n  createCompositeAction(config: CompositeActionConfig) {\n    const compositeAction = new CompositeAction(config, this.eventBus);\n    return createCompositeActionApi(compositeAction);\n  }\n\n  registerMachine(id: string, machine: any) {\n    this.machines.set(id, machine);\n  }\n\n  registerCtx(id: string, ctx: any) {\n    this.ctxs.set(id, ctx);\n  }\n\n  getMachine(id: string) {\n    return this.machines.get(id);\n  }\n\n  getCtx(id: string): Ctx {\n    return this.ctxs.get(id);\n  }\n\n  deleteMachine(id: string) {\n    this.machines.delete(id);\n  }\n\n  deleteCtx(id: string) {\n    this.ctxs.delete(id);\n  }\n}\n\nexport default Retomus;\nexport { createRetomus, createRetomusConfig };\n","import { CompositeActionConfig } from \"../core/CompositeAction/types\";\nimport { MachineConfig } from \"../core/Machine/types\";\n\nconst RetomusUtils = {\n   createMachineConfig(config: MachineConfig): MachineConfig {\n      return config;\n   },\n   createCompositeActionConfig(config): CompositeActionConfig {\n      return config;\n   }\n\n   // createMachineConfig() {}\n\n   // createStatusDefinitions() {}\n\n   // createTransitionDefinitions() {}\n\n   // createActionDefinitions() {}\n\n   // createCtxDefinition() {}\n\n   // createInitialStatusDefinition() {}\n\n   // createPayloadDefinitions() {}\n}\n\nexport default RetomusUtils;"],"mappings":"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","names":["actionFlowMatter","import_react","import_react","getHandle","setHandle","proxies","ctx","import_react","value","import_react"]}